---
title: Probabilistic inference in dynamical systems
toc: true
number-sections: true
highlight-style: pygments
csl: ../../bibstyle.csl
lightbox: auto
format:
#   nature-pdf:
#     natbibstyle: sn-nature
#     # classoption:
#     #   - lineno
#     cite-method: citeproc
#     keep-tex: true
  html:
    html-math-method: mathjax
    include-in-header: ../../mathjax.html
#     mainfont: Latin Modern Sans
#     code-fold: false
#     embed-resources: true
#   docx: default
  ipynb: default
format-links: [ipynb]
execute: 
  freeze: true
  eval: true
  warning: false
  error: false
  cache: true
  # keep-ipynb: true
  # keep-md: true
author:
  - name: Pyrovelocity Team
    email: team@pyrovelocity.net
abstract: |
  This notebook provides a discussion and demonstration of one way to proceed in
  performing probabilistic inference in dynamical systems. In particular we prepare 
  and simulate a deterministic dynamical system and then perform probabilistic 
  inference on the latent variables of the system. This illustrates how to combine
  these two approaches, which is essential for understanding Pyro-Velocity.
keywords: [single-cell transcriptomics, probabilistic modeling, dynamical systems, RNA velocity]
bibliography: ../../references.bib
jupyter:
  jupytext:
    cell_metadata_filter: all
    cell_metadata_json: true
    notebook_metadata_filter: all
    text_representation:
      extension: .qmd
      format_name: quarto
      format_version: 1.0
      jupytext_version: 1.16.0
  kernelspec:
    display_name: Python 3
    language: python
    name: python3
  language_info:
    name: python
  rise:
    scroll: true
    theme: black
  toc-autonumbering: true
  toc-showcode: false
  toc-showmarkdowntxt: false
---

## Model

### Description

Here we describe the model we will use to demonstrate probabilistic 
inference in dynamical systems. We begin with a candidate 
[effective theory](https://en.wikipedia.org/wiki/Effective_theory) 
[@Wells2012-qf;@Alon2019-ah] of gene transcription and splicing following 
[@Zeisel2011-nz;@La_Manno2018-lj;@Bergen2020-pj] for the model and 
[@Cantwell2002-dv] for the presentation of the analysis. In particular we show in 
@tbl-transcription-splicing-degradation the variables and parameters of the model
together with their units and rough order of magnitude estimates for their values 
[@Phillips2012-mi].

| Symbol   | Description                 | Units                         | $O(-)$ Estimate | Discussion                                                                          |
|----------|-----------------------------|-------------------------------|-----------------|-------------------------------------------------------------------------------------|
| $u$      | Concentration of pre-mRNA   | molecules/cell                | $10^0 - 10^4$   | Wide range reflecting low to high gene expression levels.                           |
| $s$      | Concentration of mRNA       | molecules/cell                | $10^0 - 10^5$   | Similar to $u$; depends on gene expression and stability of mRNA.                   |
| $t$      | Time                        | seconds ($s$) to hours ($hr$) | $10s$ - $24hr$  | Depends on the duration of the experimental observation.                            |
| $\alpha$ | Production rate of pre-mRNA | molecules/(cell·hr)           | $1 - 10^3$      | Based on variable gene transcription rates.                                         |
| $\beta$  | Splicing rate of pre-mRNA   | $hr^{-1}$                     | $0.1 - 1$       | Pre-mRNA to mRNA splicing rates, assuming rapid processing within the nucleus.      |
| $\gamma$ | Degradation rate of mRNA    | $hr^{-1}$                     | $0.1 - 1$       | mRNA half-lives can vary widely, but many are in the range of a few hours to a day. |

: Variables and parameters of the transcription-splicing-degradation model of [@Zeisel2011-nz]. {#tbl-transcription-splicing-degradation}

Given the state variables representing concentrations of pre-mRNA, $u$, 
and mRNA, $s$, we have the following ordinary differential equations 

\begin{align}
\frac{du}{dt} & = \alpha - \beta u  \label{eq-dudt} \\
\frac{ds}{dt} & = \beta u - \gamma s  \label{eq-dsdt}
\end{align}

\eqref{eq-dudt} and \eqref{eq-dsdt} are usually presented with 
the concept that the parameter $\alpha$ could better account for the external 
inputs to the regulation of transcription of the gene if it were allowed to be 
a function of time, $\alpha(t)$. We will return to this point later, but 
for now we will assume that $\alpha$ and other parameters are constant.

### Dimensional analysis

It is common to perform a dimensional analysis of the model to ensure the
units of the variables and parameters are consistent and reduce the total number
of parameters by the number of dimensions. Intuitively, this folds or maps parameters
to equivalence classes of similar dynamics.  For reference, the procedure
we outline is also commonly referred to as Buckingham's $\Pi$ theorem.

@tbl-transcription-splicing-degradation together with (\ref{eq-dudt}-\ref{eq-dsdt})
contain essentially all the information we require to get started. The dimensions of the variables and parameters together with dimensionless ones are provided in @tbl-parameter-dimensions.

| Dimensioned Parameter | Relation to Rescaling Parameters | Fundamental Units        |
|-----------------------|--------------------------------------|--------------------------|
| Production Rate ($\alpha$) | $\alpha = U_0 \beta$             | molecules/(cell·time)    |
| Splicing Rate ($\beta$)    | Reference Scale for $t^*$        | $1/\text{time}$        |
| Degradation Rate ($\gamma$)| $\gamma = \gamma^* \beta$        | $1/\text{time}$        |
| Pre-mRNA Concentration ($u$)| $u = u^* U_0$                    | molecules/cell           |
| mRNA Concentration ($s$)    | $s = s^* U_0$                    | molecules/cell           |
| Time ($t$)                  | $t = t^* / \beta$                | time                     |

: Variables and parameters of the transcription-splicing-degradation model together with their fundamental units and their relations to dimensionless parameters. {#tbl-parameter-dimensions}

Note that molecules are dimensionless numbers while cells have units associated 
to their volume (i.e. the cube of a distance or length $L^3$). Usually we would 
just write volume but we retain cell to associate to the object that determines 
the relevant volume in this case. The dimensionless parameters are defined in 
@tbl-dimensionless-parameters.

| Dimensionless Variables and Parameters | Definition                     | Intuitive Description                                      |
|-------------------------|--------------------------------|------------------------------------------------------------|
| $u^{\ast}$ , $s^{\ast}$ | $u / U_0$, $s / U_0$             | Characteristic Scale of (pre-)mRNA concentration based on the balance between production and splicing rates. |
| $t^*$                 | $\beta t$                    | Characteristic time scale relative to the splicing rate. |
| $\gamma^*$            | $\gamma / \beta$             | Relative degradation rate, comparing the degradation rate of mRNA to the splicing rate, indicating the stability or turnover rate of mRNA relative to its production/splicing. |

: Dimensionless Parameters, definitions, and intuitive Descriptions {#tbl-dimensionless-parameters}

Combining variables and parameters we have six and we have two fundamental 
dimensions (time and length) we can eliminate to arrive at four essential 
variables and parameters. To derive these, we begin declaring the equations 
in python using [sympy](https://www.sympy.org/) and substitute the 
dimensionless variables and parameters to obtain the dimensionless equations.

```{python}
#| label: transcription-splicing-degradation-equations
#| code-fold: true
from sympy import (
    diff,
    Eq,
    Function,
    init_printing,
    solve,
    symbols,
)
from IPython.display import display

init_printing(use_latex=True)

alpha, beta, gamma, gamma_star = symbols("alpha beta gamma gamma_star")
U0, T0 = symbols("U0 T0")
t, t_star = symbols(
    "t t_star",
)

u = Function("u")(t)
s = Function("s")(t)
u_star = Function("u_star")(t_star)
s_star = Function("s_star")(t_star)

du_dt = Eq(diff(u, t), alpha - beta * u)
ds_dt = Eq(diff(s, t), beta * u - gamma * s)
display(du_dt)
display(ds_dt)
```

and define dimensionelss variables and parameters as

```{python}
# | label: transcription-splicing-degradation-dimensionless
U0_eq = Eq(U0, alpha / beta)
T0_eq = Eq(T0, 1 / beta)

u_dimless = Eq(u_star, u / U0)
s_dimless = Eq(s_star, s / U0)
t_dimless = Eq(t_star, beta * t)
```

Now we change the variables in the equations to the dimensionless ones

```{python}
#| code-fold: true
du_dt_dimless = Eq(
    beta * diff(u_star * alpha / beta, t_star),
    du_dt.rhs.subs(
        {
            u: u_star * alpha / beta,
            s: s_star * alpha / beta,
            t: t_star / beta,
            gamma: gamma_star * beta,
        }
    ),
).simplify()
du_dt_dimless
```

and

```{python}
# | code-fold: true
ds_dt_dimless = Eq(
    beta * diff(s_star * alpha / beta, t_star),
    ds_dt.rhs.subs(
        {
            u: u_star * alpha / beta,
            s: s_star * alpha / beta,
            t: t_star / beta,
            gamma: gamma_star * beta,
        }
    ),
).simplify()

ds_dt_dimless
```

We see that we correctly arrive at the equivalent dimensionless system of equations

\begin{align}
\frac{du^{\ast}}{dt^{\ast}} & = 1 - u^{\ast}  \label{eq-dustardtstar} \\
\frac{ds^{\ast}}{dt^{\ast}} & = u^{\ast} - \gamma^{\ast} s^{\ast}  \label{eq-dsstardtstar}
\end{align}

in \eqref{eq-dustardtstar} and \eqref{eq-dsstardtstar}, which contains the 
$6 - 2 = 4$ variables and parameters: $u^{\ast}, s^{\ast}, t^{\ast}, \gamma^{\ast}$. 

We'll solve the dimensionless system analytically, focusing on what can be 
understood about the system's dynamics.
Given generic initial conditions $u^{\ast}(0) = u^{\ast}_0$ and $s^{\ast}(0) = s^{\ast}_0$, the 
first equation

$$
\frac{du^{\ast}}{dt^{\ast}} = 1 - u^{\ast},
$$

can be solved using separation of variables

$$
u^{\ast}(t^{\ast}) = C_1 e^{-t^{\ast}} + 1.
$$

$C_1$ is the constant determined by initial conditions, which can be shown to be $C_1 = u^{\ast}_0 - 1$, giving us

$$
u^{\ast}(t^{\ast}) = (u^{\ast}_0 - 1) e^{-t^{\ast}} + 1.
$$

This equation describes how the concentration of pre-mRNA, in units of the 
characteristic concentration scale given by $\alpha/\beta$, evolves over the 
timescale characterized by the splicing rate. The term $e^{-t^{\ast}}$ 
indicates that any deviation of $u^{\ast}$ from its steady state $1$ decays 
exponentially over time.

Now, we substitute the expression for $u^{\ast}(t^{\ast})$ into the 
differential equation for mRNA concentration

$$
\frac{ds^{\ast}}{dt^{\ast}} = u^{\ast} - \gamma^{\ast} s^{\ast}
$$

which gives

$$
\frac{ds^{\ast}}{dt^{\ast}} = [(u^{\ast}_0 - 1) e^{-t^{\ast}} + 1] - \gamma^{\ast} s^{\ast}
$$

This equation is a non-homogeneous first-order linear ODE for $s^{\ast}$. 
To solve it, we can use an integrating factor $e^{\gamma^{\ast} t^{\ast}}$, 
which gives

$$
e^{\gamma^{\ast} t^{\ast}} \frac{ds^{\ast}}{dt^{\ast}} + \gamma^{\ast} e^{\gamma^{\ast} t^{\ast}} s^{\ast} = (u^{\ast}_0 - 1) e^{(\gamma^{\ast}-1) t^{\ast}} + e^{\gamma^{\ast} t^{\ast}}
$$

Integrating both sides with respect to $t^{\ast}$ yields $s^{\ast}(t^{\ast})$

$$
s^{\ast}(t^{\ast}) = C_2 e^{-\gamma^{\ast} t^{\ast}} + \frac{u^{\ast}_0 - 1}{\gamma^{\ast} - 1} e^{-t^{\ast}} + \frac{1}{\gamma^{\ast}}
$$

where $C_2$ is another integration constant determined by initial conditions.
Incorporating the initial condition  $s^{\ast}(0) = s^{\ast}_0$ into the solution for $s^{\ast}(t^{\ast})$ to determine $C_2$

$$
C_2 = s^{\ast}_0 - \frac{u^{\ast}_0 - 1}{\gamma^{\ast} - 1} - \frac{1}{\gamma^{\ast}}.
$$

With $C_2$ determined, we define

$$
\xi = \frac{u^{\ast}_0 - 1}{\gamma^{\ast} - 1},
$$

so that the complete solutions for the dimensionless system are given by

\begin{align}
u^{\ast}(t^{\ast}) & = \underbrace{1}_{\text{Steady State}} + \underbrace{(u^{\ast}_0 - 1) e^{-t^{\ast}}}_{\text{Transient Component}},  \label{eq-ustar-dimless} \\
s^{\ast}(t^{\ast}) & = \underbrace{\frac{1}{\gamma^{\ast}}}_{\text{Steady State}} + \underbrace{\left( s^{\ast}_0 - \xi - \frac{1}{\gamma^{\ast}} \right) e^{-\gamma^{\ast} t^{\ast}} + \xi e^{-t^{\ast}}}_{\text{Transient Components}}.  \label{eq-sstar-dimless}
\end{align}

The **pre-mRNA dynamics** $u^{\ast}(t^{\ast})$ \eqref{eq-ustar-dimless} quickly 
settles to its steady state value of 1, regardless of the initial concentration, 
reflecting the balance between transcription and splicing rates. Note again that this
does not refer to an arbitrary value of $1$ but rather represents the equivalence
class of ratios $\alpha/\beta$.

The **mRNA dynamics** $s^{\ast}(t^{\ast})$ \eqref{eq-sstar-dimless} reveals a 
slightly more complicated balance of forces. The first transient term shows an exponential 
decay influenced by $\gamma^{\ast}$, the degradation rate relative to the splicing rate. 
The second transient term reflects how the 
initial deviation in pre-mRNA concentration from its steady state affects mRNA 
levels over time. The steady state of $s^{\ast}$ simply reflects the balance
of the splicing rate, which is the only source of mRNA production in this model,
and the degradation rate also given, just as in the case of the pre-mRNA, in units of 
the transcription rate relative to the splicing rate. 

The analytical solutions to the dimensionless system reveal how the pre-mRNA 
and mRNA concentrations evolve over time towards their steady states. The 
exponential terms highlight the system's inherent timescales: $u^{\ast}$ relaxes 
to its steady state independently, while $s^{\ast}$’s dynamics are coupled to 
both $u^{\ast}$ and its own degradation rate. While this system is extremely
simplified relative to well-known biology, as a stylized model it still
indicates the interplay among transcription, splicing, and degradation rates.

While it is trivial to solve this system analytically, in more general cases this
 will not be possible. 
So we will proceed to simulate the system to characterize the possible solution 
sets and then perform probabilistic inference on the latent variables.

## Data

If we are just given samples of pre-mRNA and mRNA counts without additional
information about their sampling times, we can describe the data set 
$\mathcal{D}$ consisting of pre-mRNA and mRNA counts for a number 
of genes $G$ across a number of cells $N$

$$
\mathcal{D} = \left\{ (u_{ij}, s_{ij}) \mid i \in \{1, \ldots, G\}, j \in \{1, \ldots, N\} \right\}
$$

where

- $u_{ij}$ represents the count of pre-mRNA for gene $i$ in cell $j$,
- $s_{ij}$ represents the count of mRNA for the same gene $i$ in the same cell $j$,
- $G$ is the total number of genes in the study,
- $N$ is the total number of cells sampled.

Roughly speaking, the inference problem involves

1. **Normalization**: Transforming the observed counts $u_{ij}$ and $s_{ij}$ to 
   their dimensionless counterparts $u^{\ast}_{ij}$ and $s^{\ast}_{ij}$ using 
   any reasonable concentration scale $U_0$.
2. **Model Fitting**: Applying statistical methods to estimate the latent variables 
   $\Theta = \left( \gamma^{\ast}, u^{\ast}_0, s^{\ast}_0, t^{\ast} \right)$ that best 
   fit the observed data.
3. **Evaluation**: Assessing the fit of the model and the estimated parameters'
   biological plausibility and consistency across different genes and cells.

This representation of the dataset and the associated objective of 
statistical learning provides a solid foundation for applying probabilistic
modeling techniques to calibrate an inference procedure andevaluate the 
plausibility of this model in such a manner that we can eventually compare 
multiple candidate models to one another.

## Simulation

We will primarily focus on simulating the system, since this will generalize
to more complicated models. However, we will confirm our simulations for this
first and simplest model recapitulate its analytical solution derived above.

As a simple example, we will simulate the system for a single set of initial
conditions and parameters.

```{python}
# | label: transcription-splicing-degradation-simulation
from pyrovelocity.models import solve_transcription_splicing_model
from jax import numpy as jnp

ts0 = jnp.linspace(0, 4, 40)
ts1 = jnp.linspace(4 + (10 - 4) / 20, 10, 20)
ts = jnp.concatenate([ts0, ts1])
initial_state = jnp.array([0.5, 0.5])
params = (0.5,)

solution = solve_transcription_splicing_model(ts, initial_state, params)
```

We can visualize the results of the simulation by plotting the pre-mRNA and mRNA
concentrations over time as shown in @fig-transcription-splicing-degradation-plot-simulation-trajectory-1,

```{python}
# | label: fig-transcription-splicing-degradation-plot-simulation-trajectory-1
# | code-fold: true
from pyrovelocity.plots import plot_deterministic_simulation_trajectories

plot_deterministic_simulation_trajectories(
    solution,
    title_prefix="TSD Model",
)
```

and the phase portrait in @fig-transcription-splicing-degradation-plot-simulation-phase-portrait-1.

```{python}
# | label: fig-transcription-splicing-degradation-plot-simulation-phase-portrait-1
# | code-fold: true
from pyrovelocity.plots import plot_deterministic_simulation_phase_portrait

plot_deterministic_simulation_phase_portrait(
    solution,
    title_prefix="TSD Model",
)
```


## Inference

Now that we have illustrated how to simulate the system, we can proceed to
define a probabilistic model and perform inference on its latent variables.
