# Contributing

If you would like to simply get started developing please feel free to skip to the
[development environment](#development-environment) section below.

Contributions are welcome, greatly appreciated, and will be appropriately acknowledged.
If you are new to contributing to open source software please consider reviewing the
[open source guides](https://opensource.guide/) and the brief descriptions below.
Briefly, please feel free to engage a discussion or github issue, fork the repository,
create a branch, make changes, ensure the code is linted and the tests pass, add documentation,
where relevant, and submit a pull request. At this point the continuous integration
workflows will run and we will engage a more detailed discussion in reviewing the changes.

::: {#nte-contributing .callout-note collapse=true title="Current state of the repository"}
Please note that pyrovelocity is still in the early stages of development.
The current state of the documentation and repository are not complete
with respect to the procedures for contributing outlined here; however,
we plan to respect them as we continue to develop the project.
:::

## Types of Contributions

### Report Bugs

Report bugs at <https://github.com/pinellolab/pyrovelocity/issues>.

If you are reporting a bug, please fill out the provided template including:

- Your operating system name and version.
- Any details about your local setup that might be helpful in troubleshooting.
- Detailed steps to reproduce the bug.

### Respond to existing issues

Review the history of both open and closed GitHub issues.
If you would like to attempt to resolve an open issue please comment on the issue,
fork the repository, create a branch with name format `##-subtitle`, where `##` is the issue number
and `subtitle` is a word that is related to the issue.
Run experiments and write tests from your local fork and then submit a pull request referencing
the issue.

### Write Documentation

If you would like to add or contribute to refining the documentation, 
please create an issue and submit a pull request with modifications to the
[documentation site](https://github.com/pinellolab/pyrovelocity/tree/main/nbs), 
docstrings and doctests, or adding illustrative pytest tests.
We attempt to loosely follow the [diataxis](https://diataxis.fr/) recommendations 
for structuring technical documentation.


### Submit Feedback

The best way to send feedback is to file an issue at <https://github.com/pinellolab/pyrovelocity/issues>.

If you are proposing a feature:

- Explain in detail how it would work.
- Keep the scope as narrow as possible, to make it easier to implement.
- Remember that this is a volunteer-driven project, and that contributions
  are welcome :)

## Development environment

### Local

The following is a rough guide to setting up `pyrovelocity` for local development.
Please do not hesitate to reach out if you need help setting up a development environment.

1. Fork the [pyrovelocity](https://github.com/pinellolab/pyrovelocity)
   repository on GitHub.

1. Clone your fork locally:

   ```
   $ git clone https://github.com/your_name_here/pyrovelocity.git
   ```

1. Install [poetry](https://python-poetry.org/docs/#installing-with-the-official-installer) and 
   install the repository source code in editable mode:

   ```bash
   poetry install --sync
   ```

1. Create a branch for local development:

   ```bash
   git checkout -b 572-branch
   ```

   Now you can make your changes locally.
   You may need to familiarize yourself with using poetry to manage virtual environments and
   dependencies.

1. When you're done making changes, lint the code

   ```bash
   make lint
   ```

   and run the tests

   ```bash
   pytest
   ```

   These will be confirmed via the GitHub actions workflow that will
   run when you submit your pull request.

1. Commit your changes and push your branch to GitHub:

   ```bash
   git add .
   git commit -m "Your detailed description of your changes."
   git push origin name-of-your-bugfix-or-feature
   ```

1. Submit a pull request through the GitHub CLI or website targeting the `beta` branch.

   ```bash
   gh pr create \
   -d \
   -a "@me" \
   -B beta \
   -t "fix(model): add types for train_model function" \
   -r username \
   -b "- [x] added types to all parameters of the train_model function
   - [x] enabled beartype and refactored associated tests
   "
   ```

Using [nix](https://github.com/NixOS/nix), [home-manager](https://github.com/nix-community/home-manager), and [nixpkgs](https://github.com/NixOS/nixpkgs) [dockerTools](https://nixos.org/manual/nixpkgs/stable/#sec-pkgs-dockerTools), [nixpod](https://ghcr.io/cameronraysmith/nixpod) provides a containerized or containerizable drop-in user configuration on any platform where the [nix](https://github.com/NixOS/nix) package manager is already, or can be, [installed](https://nix.dev/install-nix.html). This is intended to include, but is not limited to, scenarios like those involving [kubernetes ephemeral containers](https://kubernetes.io/docs/concepts/workloads/pods/ephemeral-containers/) via images like [netshoot](https://github.com/nicolaka/netshoot), which might be used for debugging purposes adjacent to otherwise minimal container images. See the [github packages associated to this repository](https://github.com/cameronraysmith?tab=packages&repo_name=nixpod) for the containers currently built in the [nixpod CID](https://github.com/cameronraysmith/nixpod/blob/main/.github/workflows/cid.yaml).

This repository originally contained a [nix flake](https://zero-to-nix.com/concepts/flakes) that essentially integrated a few parts of [srid/nixos-config](https://github.com/srid/nixos-config) into [juspay/nix-dev-home](https://github.com/juspay/nix-dev-home). These were merged upstream in [juspay/nix-dev-home#7](https://github.com/juspay/nix-dev-home/pull/7), so you might want to look there.

### Nix

The instructions above only cover python dependencies.
We use the [nix](https://github.com/NixOS/nix) package manager with a [nix flake](https://nix.dev/concepts/flakes) to manage both system 
dependencies and python dependencies together in a reproducible manner.
The nix flake integrates with [direnv](https://github.com/direnv/direnv) and provides a devlopment shell that can be activated with 

```bash
direnv allow
```

if you have [nix](https://nix.dev/install-nix.html) and direnv installed.

### Container image

We provide a relatively minimal [OCI image](https://github.com/opencontainers/image-spec)
built with [nix](#nix) and [dockerTools](https://nixos.org/manual/nixpkgs/stable/#sec-pkgs-dockerTools).
It only supports linux x86-64, but can be run with rosetta on macOS.

For example if you have a tool that provides a container runtime like nerdctl, podman, or docker installed

```bash
docker run --rm -it --entrypoint bash --platform=linux/amd64 ghcr.io/pinellolab/pyrovelocity:latest
```

### Cloud

If you would like to access the cloud environment used to develop `pyrovelocity`,
execute model training across many data set and model configurations, and track
associated artifacts, please do not hesitate to reach out to us.
We have limited availability, but would like to provide these resources to interested
external contributors.

## Pull Request Guidelines

Before you submit a pull request, check that it meets these guidelines:

1. The pull request should include [pytest](https://docs.pytest.org/) tests and, 
   where relevant, [xdoctest](https://github.com/Erotemic/xdoctest) 
   [doctests](https://docs.python.org/3/library/doctest.html).
1. If the pull request adds or significantly modifies functionality, the relevant
   [Google-style docstrings](https://sphinxcontrib-napoleon.readthedocs.io/en/latest/example_google.html)
   and [docs](https://github.com/pinellolab/pyrovelocity/tree/main/nbs) should likely be updated.
1. The pull request should pass the CI execution for the primary supported python version (currently Python 3.10).
