---
title: Pancreatic endocrinogenesis
execute: 
  freeze: true
  eval: true
  warning: false
  error: false
  cache: true
toc: true
number-sections: true
highlight-style: gruvbox
csl: ../../../bibstyle.csl
lightbox: auto
format:
  html:
    html-math-method: katex
  ipynb: default
---

```{python}
#| label: enable-autoreload
#| code-fold: true
#| output: false
%load_ext autoreload
%autoreload 2 
from IPython.display import Image, display
``` 

Please see the [guide on interactive results review](/guides/interactive/interactive.qmd) for a 
general review of how to download and review results. Here we use the same 
approach without any of the explanatory text to retrieve model results to 
generate plots for model selection and evaluation.

## Get results

::: {#wrn-downsampled-data .callout-warning collapse=true title="Downsampled Data"}
In this notebook we illustrate how to download and review results using
unrealistic downsampled data. Therefore, this notebook should not be taken
to represent the results of applying the model to real data.
:::


### Identify results of interest

```{python}
# | label: get-workflow-io
from pyrovelocity.io.cluster import get_remote_task_results

# execution_id = "pyrovelocity-py311-defaul-fe20d09-dev-pzh-17b5092261c84e8695a"  # downsampled
execution_id = (
    "pyrovelocity-595-gsmc-feaa936-dev-vf0-264734a284ac493fa39"  # complete
)

(
    model1_postprocessing_inputs,
    model1_postprocessing_outputs,
) = get_remote_task_results(
    execution_id=execution_id,
    task_id="f26c1pjy-0-dn1-0-dn3",
)

(
    model2_postprocessing_inputs,
    model2_postprocessing_outputs,
) = get_remote_task_results(
    execution_id=execution_id,
    task_id="f26c1pjy-0-dn1-0-dn7",
)
```

### Download results

```{python}
# | label: download-outputs
from pyrovelocity.io.gcs import download_blob_from_uri

model1_pyrovelocity_data = download_blob_from_uri(
    blob_uri=model1_postprocessing_outputs.o0.pyrovelocity_data.path,
    download_filename_prefix=f"{model1_postprocessing_inputs.training_outputs.data_model}",
)
model1_postprocessed_data = download_blob_from_uri(
    blob_uri=model1_postprocessing_outputs.o0.postprocessed_data.path,
    download_filename_prefix=f"{model1_postprocessing_inputs.training_outputs.data_model}",
)

model2_pyrovelocity_data = download_blob_from_uri(
    blob_uri=model2_postprocessing_outputs.o0.pyrovelocity_data.path,
    download_filename_prefix=f"{model2_postprocessing_inputs.training_outputs.data_model}",
)
model2_postprocessed_data = download_blob_from_uri(
    blob_uri=model2_postprocessing_outputs.o0.postprocessed_data.path,
    download_filename_prefix=f"{model2_postprocessing_inputs.training_outputs.data_model}",
)
```


## Analyze results

### Model 1

#### Load data

```{python}
# | label: model1-load-postprocessed-data
# | output: true
import scanpy as sc
from pyrovelocity.utils import print_anndata

adata = sc.read(model1_postprocessed_data)
print_anndata(adata)
```

```{python}
# | label: model1-load-posterior-samples
# | output: true
from pyrovelocity.utils import pretty_print_dict
from pyrovelocity.io import CompressedPickle

posterior_samples = CompressedPickle.load(model1_pyrovelocity_data)
pretty_print_dict(posterior_samples)
```

#### Extract results of interest

We decompose the correlation of each gene's expression level with the
cell time estimates into eight equally-spaced bins and select the top 3% of genes with respect to the mean absolute error between the predictive sample mean and
the observed expression level.

```{python}
# | label: model1-extract-gene-selection
from pyrovelocity.analysis.analyze import top_mae_genes

volcano_data = posterior_samples["gene_ranking"]
number_of_marker_genes = min(
    max(int(len(volcano_data) * 0.1), 4), 6, len(volcano_data)
)
putative_marker_genes = top_mae_genes(
    volcano_data,
    mae_top_percentile=3,
    min_genes_per_bin=3,
)
```

#### Generate plots

We generate several summary plots below for two distinct model classes 
in order to support comparative model evaluation, which is among few
options for selecting effective models that are not designed to be
microscopically valid.

Here we plot the gene selection statistics highlighting genes of interest
based upon them.

```{python}
# | label: model1-generate-gene-selection-plot
# | output: false
from pyrovelocity.plots import plot_gene_ranking

vector_field_basis = (
    model1_postprocessing_inputs.preprocess_data_args.vector_field_basis
)
cell_state = model1_postprocessing_inputs.preprocess_data_args.cell_state

plot_gene_ranking(
    posterior_samples=[posterior_samples],
    adata=[adata],
    selected_genes=putative_marker_genes,
    time_correlation_with="st",
    show_marginal_histograms=True,
    save_volcano_plot=True,
    volcano_plot_path="model1_volcano_plot.pdf",
)
```
```{python}
# | label: model1-show-gene-selection-plot
# | code-fold: true
# | output: true
display(Image(filename=f"model1_volcano_plot.pdf.png"))
```

We can attempt to attribute the statistics to underlying features plotting 
phase portraits, predictive expression, and log-transformed expression of
the proposed marker genes

```{python}
# | label: model1-generate-rainbow-plot
# | output: false
from pyrovelocity.plots import rainbowplot

rainbowplot(
    volcano_data=volcano_data,
    adata=adata,
    posterior_samples=posterior_samples,
    genes=putative_marker_genes,
    data=["st", "ut"],
    basis=vector_field_basis,
    cell_state=cell_state,
    save_plot=True,
    rainbow_plot_path="model1_rainbow_plot.pdf",
)
```

```{python}
# | label: model1-show-rainbow-plot
# | code-fold: true
# | output: true
display(Image(filename=f"model1_rainbow_plot.pdf.png"))
```


### Model 2

We provide a comparable analysis for the second model below.

#### Load data

```{python}
# | label: model2-load-postprocessed-data
# | output: true
import scanpy as sc
from pyrovelocity.utils import print_anndata

adata = sc.read(model2_postprocessed_data)
print_anndata(adata)
```

```{python}
# | label: model2-load-posterior-samples
# | output: true
from pyrovelocity.utils import pretty_print_dict
from pyrovelocity.io import CompressedPickle

posterior_samples = CompressedPickle.load(model2_pyrovelocity_data)
pretty_print_dict(posterior_samples)
```

#### Extract results of interest

```{python}
# | label: model2-extract-gene-selection
from pyrovelocity.analysis.analyze import top_mae_genes

volcano_data = posterior_samples["gene_ranking"]
number_of_marker_genes = min(
    max(int(len(volcano_data) * 0.1), 4), 6, len(volcano_data)
)
putative_marker_genes = top_mae_genes(
    volcano_data,
    mae_top_percentile=3,
    min_genes_per_bin=3,
)
```

#### Generate plots

```{python}
# | label: model2-generate-gene-selection-plot
# | output: false
from pyrovelocity.plots import plot_gene_ranking

vector_field_basis = (
    model2_postprocessing_inputs.preprocess_data_args.vector_field_basis
)
cell_state = model2_postprocessing_inputs.preprocess_data_args.cell_state

plot_gene_ranking(
    posterior_samples=[posterior_samples],
    adata=[adata],
    selected_genes=putative_marker_genes,
    time_correlation_with="st",
    show_marginal_histograms=True,
    save_volcano_plot=True,
    volcano_plot_path="model2_volcano_plot.pdf",
)
```
```{python}
# | label: model2-show-gene-selection-plot
# | code-fold: true
# | output: true
display(Image(filename=f"model2_volcano_plot.pdf.png"))
```


Plot phase portraits, predictive expression, and log-transformed expression of
all proposed marker genes

```{python}
# | label: model2-generate-rainbow-plot
# | output: false
from pyrovelocity.plots import rainbowplot

rainbowplot(
    volcano_data=volcano_data,
    adata=adata,
    posterior_samples=posterior_samples,
    genes=putative_marker_genes,
    data=["st", "ut"],
    basis=vector_field_basis,
    cell_state=cell_state,
    save_plot=True,
    rainbow_plot_path="model2_rainbow_plot.pdf",
)
```

```{python}
# | label: model2-show-rainbow-plot
# | code-fold: true
# | output: true
display(Image(filename=f"model2_rainbow_plot.pdf.png"))
```
