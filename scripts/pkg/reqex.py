import logging
import os
import re

import rich_click as click
from plumbum import local
from rich.console import Console
from rich.logging import RichHandler
from rich.theme import Theme


click.rich_click.SHOW_ARGUMENTS = True
click.rich_click.USE_MARKDOWN = True


def configure_logging(logger_name: str = "reqex") -> logging.Logger:
    console_theme = Theme(
        {
            "logging.level.info": "dim cyan",
            "logging.level.warning": "magenta",
            "logging.level.error": "bold red",
            "logging.level.debug": "green",
        }
    )
    console = Console(theme=console_theme)
    rich_handler = RichHandler(
        console=console,
        rich_tracebacks=True,
        show_time=True,
        show_level=True,
        show_path=False,
        markup=True,
        log_time_format="[%X]",
    )
    valid_log_levels = ["DEBUG", "INFO", "WARNING", "ERROR", "CRITICAL"]
    log_level = os.getenv("LOG_LEVEL", "INFO").upper()

    if log_level not in valid_log_levels:
        log_level = "INFO"

    logging.basicConfig(
        level=log_level,
        format="%(message)s",
        datefmt="[%X]",
        handlers=[rich_handler],
    )
    logger = logging.getLogger(logger_name)
    logger.setLevel(log_level)
    return logger


logger = configure_logging()


@click.group(
    invoke_without_command=True,
    context_settings={"help_option_names": ["-h", "--help"]},
)
@click.pass_context
def cli(ctx):
    """
    # reqex
    _**reqex**_ generates and updates `requirements.txt` files from
    a python project using pigar and pip.

    Pass -h or --help to each command group listed below for detailed help.

    [pigar](https://github.com/damnever/pigar)
    [plumbum](https://github.com/tomerfiliba/plumbum)
    [rich-click](https://github.com/ewels/rich-click/)
    """
    if ctx.invoked_subcommand is None:
        click.echo(ctx.get_help())


@cli.command("generate")
@click.option(
    "-f",
    "--output-file",
    "output_file",
    default="pigarreqs.txt",
    help="Output file for the generated requirements.",
    show_default=True,
)
@click.argument(
    "project_path",
    default="src/",
    type=click.Path(exists=True),
)
def generate_requirements(output_file, project_path):
    """
    # reqex generate
    generate a `requirements.txt` file for a given project path using pigar.

    Runs `pigar generate` with the specified output file and project path.

    ## arguments
    - `PROJECT_PATH`: The path to the project for which to generate
      requirements. Default: `src/`

    """
    pigar = local["pigar"]
    logger.info(
        f"Generating requirements file '{output_file}' for project path '{project_path}'"
    )
    result = pigar["generate", "-f", output_file, project_path]()
    logger.info(result)


@cli.command("annotate")
@click.option(
    "-f",
    "--output-file",
    "output_file",
    default="pigarreqs-annotated.txt",
    help="Output file for the generated requirements.",
    show_default=True,
)
@click.argument(
    "project_path",
    default="src/",
    type=click.Path(exists=True),
)
def annotate_requirements(output_file, project_path):
    """
    # reqex annotate
    annotates a `requirements.txt` file for a given project path using pigar.

    Runs `pigar generate` with the referenced comments flag enabled, specified
    output file, and project path argument.

    ## arguments
    - `PROJECT_PATH`: The path to the project for which to generate annotated
      requirements. Default: `src/`

    """
    pigar = local["pigar"]
    logger.info(
        f"Generating annotated requirements file '{output_file}' for project path '{project_path}'"
    )
    result = pigar[
        "generate",
        "-f",
        output_file,
        "--with-referenced-comments",
        project_path,
    ]()
    logger.info(result)


@cli.command("update")
@click.option(
    "--input-file",
    "-i",
    "input_file",
    default="pigarreqs.txt",
    help="Input file containing package requirements.",
    show_default=True,
)
@click.option(
    "--output-file",
    "-o",
    "output_file",
    default="pigarreqs-latest.txt",
    help="Output file for latest package versions.",
    show_default=True,
)
def update_requirements(input_file, output_file):
    """
    # reqex update
    update the package versions in a `requirements.txt` file to the
    latest available versions using pip.

    Reads your specified input file, fetches the latest version for each
    package, and writes the results to the specified output file. The defaults
    refer to files generated by a command like:
        `pigar generate -f pigarreqs.txt src/`.
    """
    pip = local["pip"]

    with open(input_file) as file:
        packages = [line.split("==")[0] for line in file.readlines()]

    def get_latest_version(package):
        logger.info(f"Checking latest version for: {package}")
        output = pip("index", "versions", package)
        match = re.search(
            r"Available versions: ((?:\d+(?:\.\d+)*(?:,\s)?)+)", output
        )
        if match:
            versions = match.group(1).split(", ")
            if versions:
                return versions[0]
        return None

    with open(output_file, "w") as new_file:
        for package in packages:
            latest_version = get_latest_version(package)
            if latest_version:
                new_file.write(f"{package}=={latest_version}\n")
                logger.info(f"Updated {package} to version {latest_version}")
            else:
                logger.error(f"Could not find the latest version for {package}")


if __name__ == "__main__":
    cli()
