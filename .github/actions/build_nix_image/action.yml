name: "Build Nix Docker Image"
description: "Builds a Docker image using Nix"
inputs:
  triggerEventName:
    description: "The name of the event that triggered the workflow"
    required: true
  imageName:
    description: "Name of the Docker image"
    required: true
  nixCommand:
    description: "Nix command to build the image"
    required: true
  releaseVersion:
    description: "Release version"
    required: true
  gcpProjectId:
    description: "Google Cloud Project ID"
    required: true
  encodedGARCredentials:
    description: "Base64 encoded Google Artifact Registry Service Account credentials"
    required: true
  artifactRegistryPassword:
    description: "artifact registry password"
    required: true
  nixSubstituterName:
    description: "Name of the Nix substituter"
    required: false
  nixPrivateKey:
    description: "Nix private key"
    required: false
  gacd:
    description: "Google Application Credentials Data"
    required: false
  gcsHmacAccessID:
    description: "Google Cloud Storage HMAC Access ID"
    required: false
  gcsHmacSecretAccessKey:
    description: "Google Cloud Storage HMAC Secret Access Key"
    required: false
  cachixCacheName:
    description: "Name of the Cachix cache"
    required: false
  cachixAuthToken:
    description: "Cachix authentication token"
    required: false

runs:
  using: "composite"
  steps:
    - name: Setup QEMU
      uses: docker/setup-qemu-action@5927c834f5b4fdf503fca6f4c7eccda82949e1ee # v3
      with:
        platforms: arm64

    - name: Install nix
      uses: DeterminateSystems/nix-installer-action@7993355175c2765e5733dae74f3e0786fe0e5c4f # ratchet:DeterminateSystems/nix-installer-action@v12
      with:
        extra-conf: |
          extra-platforms = aarch64-linux

    # - name: Setup Local Nix Cache
    #   uses: DeterminateSystems/magic-nix-cache-action@b46e247b898aa56e6d2d2e728dc6df6c84fdb738 # ratchet:DeterminateSystems/magic-nix-cache-action@v7

    - name: Setup hosted nix cache
      uses: cachix/cachix-action@ad2ddac53f961de1989924296a1f236fcfbaa4fc # ratchet:cachix/cachix-action@v15
      with:
        name: "${{ inputs.cachixCacheName }}"
        authToken: "${{ inputs.cachixAuthToken }}"

    # - name: "Authenticate to Google Cloud"
    #   uses: "google-github-actions/auth@55bd3a7c6e2ae7cf1877fd1ccb9d54c0503c457c" # ratchet:google-github-actions/auth@v2
    #   with:
    #     credentials_json: "${{ inputs.gacd }}"

    # - name: Setup cache
    #   uses: zombiezen/setup-nix-cache-action@cacc7abf0a6636b0ef45ec2ae055a9734cdd4122 # ratchet:zombiezen/setup-nix-cache-action@main
    #   with:
    #     substituters: "${{ inputs.nixSubstituterName }}"
    #     secret_keys: "${{ inputs.nixPrivateKey }}"
    #     use_nixcached: true
    #     nixcached_upload_options: --jobs 8 --debug
    #     # aws_access_key_id: "${{ inputs.gcsHmacAccessID }}"
    #     # aws_secret_access_key: "${{ inputs.gcsHmacSecretAccessKey }}"

    - name: Set CI slug variables
      uses: rlespinasse/github-slug-action@797d68864753cbceedc271349d402da4590e6302 # ratchet:rlespinasse/github-slug-action@v4
      with:
        prefix: CI_

    - name: Set git variables
      shell: bash
      run: |
        echo "GIT_REPO_NAME=$CI_GITHUB_REPOSITORY_NAME_PART" >> $GITHUB_ENV
        echo "GIT_REF=$CI_GITHUB_REF_NAME" >> $GITHUB_ENV
        if [ "${{ inputs.triggerEventName }}" == "pull_request" ]; then
          echo "GIT_SHA=$CI_GITHUB_EVENT_PULL_REQUEST_HEAD_SHA" >> $GITHUB_ENV
          echo "GIT_SHA_SHORT=$CI_GITHUB_EVENT_PULL_REQUEST_HEAD_SHA_SHORT" >> $GITHUB_ENV
        elif [ -n "${{ inputs.releaseVersion }}" ]; then
          tag_base="${{ inputs.releaseVersion }}"
          tag="v$tag_base"

          sha=$(git rev-parse "$tag")
          short_sha=$(git rev-parse --short "$tag")

          echo "GIT_SHA=$sha" >> $GITHUB_ENV
          echo "GIT_SHA_SHORT=$short_sha" >> $GITHUB_ENV
        else
          echo "GIT_SHA=$CI_GITHUB_SHA" >> $GITHUB_ENV
          echo "GIT_SHA_SHORT=$CI_GITHUB_SHA_SHORT" >> $GITHUB_ENV
        fi

    - name: Set nix variables
      shell: bash
      run: |
        echo "NIX_IMAGE_SYSTEMS=x86_64-linux" >> $GITHUB_ENV

    - name: Build and Push Docker Image
      shell: bash
      run: |
        set -euxo pipefail

        echo "Using Git Repository Name: $GIT_REPO_NAME"
        echo "Using Git Reference: $GIT_REF"
        echo "Using Git SHA: $GIT_SHA"
        echo "Using Git SHA Short: $GIT_SHA_SHORT"
        df -h

        ${{ inputs.nixCommand }}

        echo "Memory and swap:"
        sudo free
        sudo swapon --show
        df -h
      env:
        GH_TOKEN: ${{ github.token }}
        GCP_PROJECT_ID: ${{ inputs.gcpProjectId }}
        ENCODED_GAR_SA_CREDS: ${{ inputs.encodedGARCredentials }}
        ARTIFACT_REGISTRY_PASSWORD: ${{ inputs.artifactRegistryPassword }}
        VERSION: ${{ inputs.releaseVersion }}

  # build-nix-images:
  #   runs-on: ubuntu-latest
  #   needs: [set-variables]
  #   if: ${{ needs.set-variables.outputs.skip_ci != 'true' && ( contains(github.event.pull_request.labels.*.name, 'build-images') || contains(github.event.pull_request.labels.*.name, 'execute-workflow') || (github.event_name == 'workflow_dispatch' && inputs.run_build_images) || (github.event_name == 'workflow_dispatch' && inputs.run_execute_workflow) ) }}
  #   concurrency:
  #     group: bni-${{ matrix.image }}-${{ github.workflow }}-${{ github.event_name == 'pull_request' && github.event.pull_request.number || github.ref }}-${{ needs.set-variables.outputs.mode }}
  #     cancel-in-progress: true
  #   permissions:
  #     contents: read
  #     packages: write
  #   strategy:
  #     matrix:
  #       image:
  #         [
  #           "pyrovelocity",
  #           "pyrovelocitydev",
  #           "pyrovelocitycode",
  #           "pyrovelocityjupyter",
  #         ]
  #   steps:
  #     - name: Maximize build space
  #       # uses: easimon/maximize-build-space@fc881a613ad2a34aca9c9624518214ebc21dfc0c # ratchet:easimon/maximize-build-space@v10
  #       uses: cameronraysmith/maximize-build-space@fdf0c06b18d92be98aa64cb68ae4ea4c9bc4794d # ratchet:cameronraysmith/maximize-build-space@print-usage
  #       if: ${{ needs.set-variables.outputs.mode != 'dev' }}
  #       with:
  #         build-mount-path: /nix
  #         build-mount-path-ownership: "root:root"
  #         root-reserve-mb: 34816
  #         swap-size-mb: 2048
  #         remove-dotnet: "true"
  #         remove-android: "true"
  #         remove-codeql: "true"
  #         remove-docker-images: "true"

  #     - name: Setup build environment
  #       uses: actions/checkout@a5ac7e51b41094c92402da3b24376905380afc29 # ratchet:actions/checkout@v4
  #       if: ${{ needs.set-variables.outputs.mode != 'dev' }}
  #       with:
  #         ref: ${{ needs.set-variables.outputs.checkout_ref }}

  #     - name: Build ${{ matrix.image }} image
  #       uses: ./.github/actions/build_nix_image
  #       if: ${{ needs.set-variables.outputs.mode != 'dev' }}
  #       with:
  #         triggerEventName: ${{ github.event_name }}
  #         imageName: "${{ matrix.image }}"
  #         nixCommand: "nix run .#${{ matrix.image }}Manifest --impure --accept-flake-config --show-trace"
  #         releaseVersion: ""
  #         gcpProjectId: ${{ secrets.GCP_PROJECT_ID }}
  #         encodedGARCredentials: ${{ secrets.ENCODED_GAR_SA_CREDS }}
  #         artifactRegistryPassword: ${{ secrets.ARTIFACT_REGISTRY_PASSWORD }}
  #         nixSubstituterName: ${{ vars.NIX_SUBSTITUTER }}
  #         # nixSubstituterName: ${{ vars.S3_NIX_SUBSTITUTER }}
  #         nixPrivateKey: ${{ secrets.NIX_PRIVATE_KEY }}
  #         gacd: ${{ secrets.GOOGLE_APPLICATION_CREDENTIALS_DATA }}
  #         gcsHmacAccessID: ${{ secrets.GCS_HMAC_ACCESS_ID }}
  #         gcsHmacSecretAccessKey: ${{ secrets.GCS_HMAC_SECRET_ACCESS_KEY }}
  #         cachixCacheName: ${{ vars.CACHIX_CACHE_NAME }}
  #         cachixAuthToken: ${{ secrets.CACHIX_AUTH_TOKEN }}

  # publish-release-images:
  #   runs-on: ubuntu-latest
  #   needs: [set-variables, release]
  #   if: ${{ needs.release.outputs.released == 'true' }}
  #   strategy:
  #     fail-fast: false
  #     matrix:
  #       image:
  #         [
  #           "pyrovelocity",
  #           "pyrovelocitydev",
  #           "pyrovelocitycode",
  #           "pyrovelocityjupyter",
  #         ]
  #   concurrency:
  #     group: pri-${{ matrix.image }}-${{ github.workflow }}-${{ github.ref }}-${{ github.sha }}
  #     cancel-in-progress: true
  #   permissions:
  #     contents: read
  #     packages: write
  #   # environment:
  #   #   name: release
  #   #   url: ${{ matrix.url }}
  #   steps:
  #     - name: maximize build space
  #       # uses: easimon/maximize-build-space@fc881a613ad2a34aca9c9624518214ebc21dfc0c # ratchet:easimon/maximize-build-space@v10
  #       uses: cameronraysmith/maximize-build-space@fdf0c06b18d92be98aa64cb68ae4ea4c9bc4794d # ratchet:cameronraysmith/maximize-build-space@print-usage
  #       with:
  #         build-mount-path: /nix
  #         build-mount-path-ownership: "root:root"
  #         root-reserve-mb: 34816
  #         swap-size-mb: 2048
  #         remove-dotnet: "true"
  #         remove-android: "true"
  #         remove-codeql: "true"
  #         remove-docker-images: "true"
  #     - name: Setup build environment
  #       uses: actions/checkout@a5ac7e51b41094c92402da3b24376905380afc29 # ratchet:actions/checkout@v4
  #       with:
  #         ref: ${{ needs.release.outputs.git-tag }}
  #     - name: Build ${{ matrix.image }} image
  #       uses: ./.github/actions/build_nix_image
  #       if: ${{ needs.set-variables.outputs.mode != 'dev' }}
  #       with:
  #         triggerEventName: ${{ github.event_name }}
  #         imageName: "${{ matrix.image }}"
  #         nixCommand: "nix run .#${{ matrix.image }}Manifest --impure --accept-flake-config --show-trace"
  #         releaseVersion: ${{ needs.release.outputs.version }}
  #         gcpProjectId: ${{ secrets.GCP_PROJECT_ID }}
  #         encodedGARCredentials: ${{ secrets.ENCODED_GAR_SA_CREDS }}
  #         artifactRegistryPassword: ${{ secrets.ARTIFACT_REGISTRY_PASSWORD }}
  #         nixSubstituterName: ${{ vars.NIX_SUBSTITUTER }}
  #         nixPrivateKey: ${{ secrets.NIX_PRIVATE_KEY }}
  #         gacd: ${{ secrets.GOOGLE_APPLICATION_CREDENTIALS_DATA }}
  #         cachixCacheName: ${{ vars.CACHIX_CACHE_NAME }}
  #         cachixAuthToken: ${{ secrets.CACHIX_AUTH_TOKEN }}
